import subprocess
import re

# Define an Array of Docker Image Names
images_1 = [
    "odh-minimal-notebook-image-n-1",
    "odh-minimal-gpu-notebook-image-n-1",
    "odh-pytorch-gpu-notebook-image-n-1",
    "odh-generic-data-science-notebook-image-n-1",
    "odh-tensorflow-gpu-notebook-image-n-1",
    "odh-trustyai-notebook-image-n-1"
]

# Loop Over Images and Update Params.env File
for image in images_1:
    # Extract existing image tag from params.env file
    with open("params.env", "r") as params_file:
        params_content = params_file.read()
        img_match = re.search(f"{image}=(.*)", params_content)
        print("img match")
        print(img_match)
        if img_match:
            img = img_match.group(1)
            registry = img.split('@')[0]

            # Extract source tag from Docker image metadata
            src_tag_cmd = subprocess.Popen(["skopeo", "inspect", f"docker://{img}", "--format", 'json'], stdout=subprocess.PIPE)
            src_tag = src_tag_cmd.communicate()[0].decode().strip().replace('-amd64', '')

            # ... (rest of the steps inside the loop)

            # Update params.env file with the new image reference
            regex = f"{src_tag}-${{ env.RELEASE_VERSION_N_1}}-\\d+-${{ steps.hash-n-1.outputs.HASH_N_1 }}"
            latest_tag_cmd = subprocess.Popen(["skopeo", "inspect", f"docker://{img}", "--format", f'{{.RepoTags | select(match("{regex}")) | .[0]}}'], stdout=subprocess.PIPE)
            latest_tag = latest_tag_cmd.communicate()[0].decode().strip()

            digest_cmd = subprocess.Popen(["skopeo", "inspect", f"docker://{registry}:{latest_tag}", "--format", '{{.Digest}}'], stdout=subprocess.PIPE)
            digest = digest_cmd.communicate()[0].decode().strip()

            output = f"{registry}@{digest}"
